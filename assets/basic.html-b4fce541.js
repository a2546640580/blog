import{_ as n,o as s,c as a,e}from"./app-9f26182c.js";const p={},t=e(`<h2 id="认识链表" tabindex="-1"><a class="header-anchor" href="#认识链表" aria-hidden="true">#</a> 认识链表</h2><p>链表是一种经典的数据结构，在很多🐂🍺的软件里都有大量使用（操作系统、JVM）</p><p>链表是一种最基本的结构，普通的单链表只有一个指向链表头的 head 指针，访问其他元素必须从 head 开始一个个往后找，遍历链表到尾节点之后继续访问就会返回 null</p><p><strong>面试情况</strong>：题目较少，类型固定，但考察频率较高</p><p><strong>学习要求</strong>：熟练掌握常见题目</p><p>工程中应用较多的有</p><ul><li>带头结点的单链表</li><li>双向循环链表</li><li>多个链表的组合使用</li></ul><blockquote><p>算法的基础是数据结构，任何数据结构的基础都是创建+增删改查</p></blockquote><h2 id="单链表" tabindex="-1"><a class="header-anchor" href="#单链表" aria-hidden="true">#</a> 单链表</h2><h3 id="内部结构" tabindex="-1"><a class="header-anchor" href="#内部结构" aria-hidden="true">#</a> 内部结构</h3><p>单链表的每个节点都有一个指向后继元素的 next 指针，表中最后一个元素的 next 指向 null</p><p><strong>链表节点的规范节点定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SNode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">get_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>value
    
    <span class="token keyword">def</span> <span class="token function">set_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
    
    <span class="token keyword">def</span> <span class="token function">get_next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">next</span>
    
    <span class="token keyword">def</span> <span class="token function">set_next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>算法题中常用节点定义</strong></p><p>虽然违背了面向对象的设计要求</p><p>但代码更为精简，因此在算法题目中应用广泛</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SNode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> <span class="token boolean">None</span>
        
    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_head <span class="token keyword">is</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历链表" tabindex="-1"><a class="header-anchor" href="#遍历链表" aria-hidden="true">#</a> 遍历链表</h3><p>对于单链表，不管进行什么操作，一定是从头开始逐个向后访问，所以操作之后是否还能找到表头非常重要</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">return</span> count

<span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表插入" tabindex="-1"><a class="header-anchor" href="#链表插入" aria-hidden="true">#</a> 链表插入</h3><ul><li>在链表的表头插入 <ol><li>创建一个新节点</li><li>使新节点的 next 指向 head</li><li>使 head 指向新节点</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    node <span class="token operator">=</span> SNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在链表尾部插入</p><ol><li><p>创建一个新节点</p></li><li><p>若为空链表，则将头指针指向新节点</p><p>若不为空，则遍历找到尾节点，将尾节点的 next 指向新节点</p><p>注意：链表非空的情况下next指针为空的节点即为尾节点</p></li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    node <span class="token operator">=</span> SNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在链表中间插入 <ol><li>创建一个新节点</li><li>遍历找到要插入的位置的前驱节点</li><li>使新节点的 next 指向前驱节点的 next</li><li>使前驱节点的 next 指向新节点</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 若为空链表或指定位置在第一个元素之前则为头部插入</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token comment"># 若指定位置超过链表尾部，则执行尾部插入</span>
    <span class="token keyword">elif</span> pos <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token comment"># 否则找到指定位置后插入</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> SNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        pre <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
        <span class="token keyword">while</span> count <span class="token operator">&lt;</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表删除" tabindex="-1"><a class="header-anchor" href="#链表删除" aria-hidden="true">#</a> 链表删除</h3><ul><li><p>删除表头节点</p><p>只需要将头指针指向头节点的后一个节点</p></li><li><p>删除最后一个节点（删除中间节点的特殊情况）</p><ol><li>找到要删除的节点的前驱节点</li><li>使前驱节点的 next 为空</li></ol></li><li><p>删除中间节点</p><ol><li>找到要删除的节点的前驱节点</li><li>使前驱节点的 next 指向其 next 的 next</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    pre <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token comment"># 遍历寻找要删除的节点</span>
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># 找到要删除的节点</span>
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>
            <span class="token comment"># 要删除的节点是第一个节点</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> pre<span class="token punctuation">:</span>
                <span class="token comment"># 将头指针指向头节点的后一个节点</span>
                self<span class="token punctuation">.</span>_head <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 将删除节点的前一个节点的next指向删除节点的后一个节点</span>
                pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">break</span>
        <span class="token comment"># 没找到就继续遍历</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表查找" tabindex="-1"><a class="header-anchor" href="#链表查找" aria-hidden="true">#</a> 链表查找</h3><p>单链表的查找只需要遍历比较节点</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h2><h3 id="内部结构-1" tabindex="-1"><a class="header-anchor" href="#内部结构-1" aria-hidden="true">#</a> 内部结构</h3><p>双向链表中每个节点中都有两个指针，既可以向前也可以向后</p><p>有两个指针的好处是移动元素更加方便</p><p><strong>节点定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DNode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>链表定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DoubleLinkList</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_head <span class="token keyword">is</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历链表-1" tabindex="-1"><a class="header-anchor" href="#遍历链表-1" aria-hidden="true">#</a> 遍历链表</h3><p>双向链表在遍历时从头节点开始逐个往后访问，与单链表的操作相同</p><h3 id="链表插入-1" tabindex="-1"><a class="header-anchor" href="#链表插入-1" aria-hidden="true">#</a> 链表插入</h3><ul><li><p>头部插入</p><ul><li><p>创建新节点</p></li><li><p>若链表为空则直接将头指针指向新节点</p><p>若链表不为空</p><ol><li>新节点 next 指向头指针所指的节点</li><li>头指针所指的节点的 prev 指向新节点</li><li>最后修改头指针指向新节点</li></ol></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    node <span class="token operator">=</span> DNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
        self<span class="token punctuation">.</span>_head<span class="token punctuation">.</span>prev <span class="token operator">=</span> node
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>尾部插入</p><ul><li><p>创建新节点</p></li><li><p>若链表为空则直接将头指针指向新节点</p><p>若链表不为空</p><ol><li><p>遍历找到尾节点</p></li><li><p>将尾节点的 next 指向新节点</p></li><li><p>将新节点的 prev 指向尾节点</p></li></ol></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    node <span class="token operator">=</span> DNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>中间位置插入</p><ol><li><p>创建新节点</p></li><li><p>遍历找到要插入的位置的前驱节点</p></li><li><p>将前驱节点的next的prev指向新节点</p></li><li><p>将新节点的next指向前驱节点的next</p></li><li><p>将前驱节点的next指向新节点</p></li><li><p>将新节点的prev指向前驱节点</p></li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> pos <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> DNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        pre <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
        <span class="token keyword">while</span> count <span class="token operator">&lt;</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        pre<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> node
        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pre
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表删除-1" tabindex="-1"><a class="header-anchor" href="#链表删除-1" aria-hidden="true">#</a> 链表删除</h3><p>首尾元素的删除比较简单</p><p>中间元素的删除</p><ul><li>遍历找到要删除的元素 cur</li><li>cur.next.prev = cur.prev</li><li>cur.prev.next = cur.next</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;删除节点&quot;&quot;&quot;</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur <span class="token operator">==</span> self<span class="token punctuation">.</span>_head<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>_head <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev
            <span class="token keyword">elif</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev
                cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表查找-1" tabindex="-1"><a class="header-anchor" href="#链表查找-1" aria-hidden="true">#</a> 链表查找</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;查找节点&quot;&quot;&quot;</span>
    cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head
    <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,59),o=[t];function l(c,i){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","basic.html.vue"]]);export{d as default};
