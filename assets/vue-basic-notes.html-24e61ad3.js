import{_ as t,o as e,c as l,e as a,a as n,b as s}from"./app-a8bec4e8.js";const o={},c=a(`<h2 id="vue模板语法" tabindex="-1"><a class="header-anchor" href="#vue模板语法" aria-hidden="true">#</a> Vue模板语法</h2><h3 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h3><p>数据绑定最常见的形式就是使用 <code>Mustache</code> 语法 (双大括号) 的文本插值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>插入属性值 <span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入运算 <span class="token punctuation">{</span><span class="token punctuation">{</span> num <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入布尔值 <span class="token punctuation">{</span><span class="token punctuation">{</span> isTrue <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入<span class="token constant">JS</span>表达式 <span class="token punctuation">{</span><span class="token punctuation">{</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入三元运算符 <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;真的&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;假的&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入字符串 <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">&#39;hahahahah&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
插入对象 <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h3>`,5),p=n("ul",null,[n("li",null,[s("指令的介绍：指令 (Directives) 是带有 "),n("code",null,"v-"),s(" 前缀的特殊 attribute。")]),n("li",null,[s("指令 attribute 的值预期是单个 JavaScript 表达式（ "),n("code",null,"v-for"),s(" 例外）")]),n("li",null,[s("指令的职责：当表达式的值改变时，将其产生的连带影响，"),n("strong",null,"响应式"),s("地作用于 DOM。")]),n("li",null,[s("指令的演示 "),n("ul",null,[n("li",null,[n("code",null,"v-text"),s("：元素的 "),n("code",null,"innerText"),s(" 属性，必须是双标签 跟 "),n("code",null,"{{}}"),s(" 效果是一样的 使用较少")]),n("li",null,[n("code",null,"v-once"),s("：一次性插值 "),n("code",null,"<span v-once>这个将不会改变: {{ msg }}</span>")]),n("li",null,[n("code",null,"v-html"),s("：元素的 "),n("code",null,"innerHtml")]),n("li",null,[n("code",null,"v-if"),s("：数据属性对应的值为假则不渲染，反之渲染 "),n("code",null,"appendChild()/removeChild()")]),n("li",null,[n("code",null,"v-else-if")]),n("li",null,[n("code",null,"v-else")]),n("li",null,[n("code",null,"v-show"),s("：控制dom元素的显示隐藏 "),n("code",null,"display:none/block;"),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"v-if和v-show的区别"),n("p",null,[s("v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做，直到条件第一次变为真时，才会渲染条件块。"),n("br"),s(" 相比之下，v-show 就简单的多，不管初始条件是什么，元素总是会被渲染，并且只是简单的基于CSS进行切换。"),n("br"),s(" 一般来说，v-if 有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件甚少改变，则使用v-if较好")])])]),n("li",null,[n("code",null,"v-on"),s(":监听 DOM 事件，并在触发时运行一些 JavaScript 代码 简写为 "),n("code",null,"@"),n("ul",null,[n("li",null,"可以绑定方法"),n("li",null,"也可以直接内联 JavaScript 语句"),n("li",null,[n("code",null,"Vue"),s(" 为 "),n("code",null,"v-on"),s(" 提供了事件修饰符来解决对事件细节的处理"),n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token comment"},"<!-- 阻止单击事件继续传播 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("a")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("click.stop")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doThis"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("a")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 提交事件不再重载页面 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("form")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("submit.prevent")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onSubmit"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("form")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 修饰符可以串联 -->"),s(`
`),n("span",{class:"token comment"},"<!--v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。-->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("a")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("click.stop.prevent")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doThat"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("a")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 只有修饰符 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("form")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("submit.prevent")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("form")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 添加事件监听器时使用事件捕获模式 -->"),s(`
`),n("span",{class:"token comment"},"<!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("click.capture")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doThis"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("..."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->"),s(`
`),n("span",{class:"token comment"},"<!-- 即事件不是从内部元素触发的 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("click.self")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doThat"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("..."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 点击事件将只会触发一次 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("a")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("click.once")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doThis"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("a")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。-->"),s(`
`),n("span",{class:"token comment"},"<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->"),s(`
`),n("span",{class:"token comment"},"<!-- 而不会等待 `onScroll` 完成  -->"),s(`
`),n("span",{class:"token comment"},"<!-- 这其中包含 `event.preventDefault()` 的情况 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("scroll.passive")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onScroll"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("..."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[n("code",null,"Vue"),s(" 允许为 "),n("code",null,"v-on"),s(" 在监听键盘事件时添加按键修饰符"),n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token comment"},"<!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("keyup.enter")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("submit"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 你可以直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"v-on:"),s("keyup.page-down")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onPageDown"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[s("使用系统修饰键来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。 "),n("ul",null,[n("li",null,[n("code",null,".ctrl")]),n("li",null,[n("code",null,".alt")]),n("li",null,[n("code",null,".shift")]),n("li",null,[n("code",null,".meta")]),n("li",null,[n("code",null,".exact"),s(": 实现系统修饰符的精确控制")]),n("li",null,[n("code",null,".left"),s(": 鼠标左键")]),n("li",null,[n("code",null,".right"),s(": 鼠标右键")]),n("li",null,[n("code",null,".middle"),s(": 鼠标滑轮")])]),n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token comment"},"<!-- Alt + C -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},"@keyup.alt.67"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("clear"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- Ctrl + Click -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"@click.ctrl"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("doSomething"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("Do something"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 即使 Alt 或 Shift 被一同按下时也会触发 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token attr-name"},"@click.ctrl"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onClick"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("A"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 有且只有 Ctrl 被按下的时候才触发 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token attr-name"},"@click.ctrl.exact"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onCtrlClick"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("A"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- 没有任何系统修饰符被按下的时候才触发 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token attr-name"},"@click.exact"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onClick"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("A"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])])]),n("li",null,[n("code",null,"v-bind"),s("：绑定标签上的属性（内置属性和自定义属性）简写为 "),n("code",null,":"),n("br"),s(" 使用"),n("code",null,"v-bind"),s("绑定class和style "),n("ul",null,[n("li",null,"操作元素的 class 列表和内联样式是数据绑定的一个常见需求"),n("li",null,[s("在将 "),n("code",null,"v-bind"),s(" 用于 "),n("code",null,"class"),s(" 和 "),n("code",null,"style"),s(" 时, 表达式结果的类型除了字符串之外，还可以是对象或数组。")]),n("li",null,"当在一个自定义组件上使用 class 属性时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。"),n("li",null,[s("当 "),n("code",null,"v-bind:style"),s(" 使用需要添加"),n("code",null,"浏览器引擎前缀"),s("的 CSS 属性时，如 "),n("code",null,"transform"),s("，"),n("code",null,"Vue.js"),s(" 会自动侦测并添加相应的前缀。")]),n("li",null,"从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 绑定HTML class"),s(`

`),n("span",{class:"token comment"},"// 对象语法"),s(`
`),n("span",{class:"token operator"},"<"),s("div v"),n("span",{class:"token operator"},"-"),s("bind"),n("span",{class:"token operator"},":"),n("span",{class:"token keyword"},"class"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},`"{ active: isActive, 'text-danger': hasError }"`),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token comment"},"// 数组语法"),s(`
`),n("span",{class:"token operator"},"<"),s("div v"),n("span",{class:"token operator"},"-"),s("bind"),n("span",{class:"token operator"},":"),n("span",{class:"token keyword"},"class"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"[activeClass, errorClass]"'),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token comment"},"// 使用三元表达式切换样式"),s(`
`),n("span",{class:"token operator"},"<"),s("div v"),n("span",{class:"token operator"},"-"),s("bind"),n("span",{class:"token operator"},":"),n("span",{class:"token keyword"},"class"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},`"[isActive ? activeClass : '', errorClass]"`),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`

`),n("span",{class:"token comment"},"// 绑定内联样式"),s(`

`),n("span",{class:"token comment"},"// 对象语法"),s(`
`),n("span",{class:"token operator"},"<"),s("div v"),n("span",{class:"token operator"},"-"),s("bind"),n("span",{class:"token operator"},":"),s("style"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},`"{ color: activeColor, fontSize: fontSize + 'px' }"`),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token comment"},"// 数组语法 （将多个样式对象应用到同一个元素上）"),s(`
`),n("span",{class:"token operator"},"<"),s("div v"),n("span",{class:"token operator"},"-"),s("bind"),n("span",{class:"token operator"},":"),s("style"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"[baseStyles, overridingStyles]"'),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token comment"},"// 多重值 （只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。）"),s(`
`),n("span",{class:"token operator"},"<"),s("div "),n("span",{class:"token operator"},":"),s("style"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},`"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"`),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[n("code",null,"v-for"),n("ul",null,[n("li",null,[s("基于一个数组来渲染一个列表 "),n("code",null,'v-for="(item, index) in items"')]),n("li",null,[s("也可以用"),n("code",null,"of"),s("来代替"),n("code",null,"in"),s(", 这样更接近Javascripe迭代器的语法")]),n("li",null,[s("遍历一个对象的属性 "),n("code",null,'v-for="(value, name) in object"')]),n("li",null,"在遍历对象时，会按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下都一致。"),n("li",null,[s("建议尽可能在使用 "),n("code",null,"v-for"),s(" 时提供 key attribute, 以便跟踪每个节点的身份，从而重用和重新排序现有元素")]),n("li",null,"不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。"),n("li",null,[s("数组更新检测 "),n("ul",null,[n("li",null,[s("Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新"),n("br"),s(" 包括"),n("code",null,"push() pop() shift() unshift() splice() sort() reverse()")]),n("li",null,"当使用非变异方法时，可以用新数组替换旧数组"),n("li",null,"Vue不能检测通过索引和数组长度导致的数组的变动解决办法如下")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 解决无法检测通过索引设置数组项"),s(`
Vue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("vm"),n("span",{class:"token punctuation"},"."),s("items"),n("span",{class:"token punctuation"},","),s(" indexOfItem"),n("span",{class:"token punctuation"},","),s(" newValue"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// 或者"),s(`
vm`),n("span",{class:"token punctuation"},"."),s("items"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("indexOfItem"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" newValue"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// 解决无法检测修改数组长度"),s(`
vm`),n("span",{class:"token punctuation"},"."),s("items"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),s("newLength"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[s("对象更新检测 "),n("ul",null,[n("li",null,"Vue 不能检测对象属性的添加或删除"),n("li",null,[s("对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用 "),n("code",null,"Vue.set(object, propertyName, value)"),s(" 方法向嵌套对象添加响应式属性。")]),n("li",null,[s("为已有对象赋值多个新属性应该用新属性创建一个新对象赋给已有对象"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("vm"),n("span",{class:"token punctuation"},"."),s("userProfile "),n("span",{class:"token operator"},"="),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" vm"),n("span",{class:"token punctuation"},"."),s("userProfile"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"27"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"favoriteColor"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Vue Green'"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])])]),n("li",null,[s("过滤和排序数组 "),n("ul",null,[n("li",null,[s("通过计算属性 "),n("code",null,'v-for="n in computedEvenNumbers"')]),n("li",null,[s("通过方法 "),n("code",null,'v-for="n in getEvenNumbers(numbers)')])])])])]),n("li",null,[n("code",null,"v-model"),n("ul",null,[n("li",null,"用于在表单中创建双向数据绑定，负责监听用户的输入事件以更新数据"),n("li",null,[n("code",null,"v-model"),s(" 在内部为不同的输入元素使用不同的属性并抛出不同的事件 "),n("ul",null,[n("li",null,[s("text 和 textarea 元素使用 "),n("code",null,"value"),s(" 属性和 "),n("code",null,"input"),s(" 事件；")]),n("li",null,[s("checkbox 和 radio 使用 "),n("code",null,"checked"),s(" 属性和 "),n("code",null,"change"),s(" 事件；")]),n("li",null,[s("select 字段将 value 作为 "),n("code",null,"prop"),s(" 并将 "),n("code",null,"change"),s(" 作为事件。")])])]),n("li",null,[s("修饰符 "),n("ul",null,[n("li",null,[n("code",null,".lazy"),s(": 从触发input事件时更新改为触发change事件更新")]),n("li",null,[n("code",null,".number"),s(": 自动将用户的输入值转为数值类型")]),n("li",null,[n("code",null,".trim"),s(": 自动过滤用户输入的首尾空白字符")])])])])])])])],-1),i=a(`<h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h2><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>模板内的表达式 ===&gt; 简单运算<br> 复杂逻辑 ===&gt; 计算属性</p><h3 id="与方法的比较" tabindex="-1"><a class="header-anchor" href="#与方法的比较" aria-hidden="true">#</a> 与方法的比较</h3><ul><li>将同一函数定义为一个方法或者一个计算属性的最终结果确实是完全相同的</li><li>不同的是计算属性是基于它们的响应式依赖进行缓存的</li><li>只在相关响应式依赖发生改变时它们才会重新求值</li><li>每当触发重新渲染时，调用方法将总会再次执行函数</li><li>缓存的目的是避免多次执行性能开销比较大的计算属性</li></ul><h3 id="与侦听属性的比较" tabindex="-1"><a class="header-anchor" href="#与侦听属性的比较" aria-hidden="true">#</a> 与侦听属性的比较</h3><ul><li><code>Vue</code> 提供了一种更通用的方式来观察和响应 <code>Vue</code> 实例上的数据变动：侦听属性</li><li>当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">firstName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">lastName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> val
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算属性的setter" tabindex="-1"><a class="header-anchor" href="#计算属性的setter" aria-hidden="true">#</a> 计算属性的setter</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// getter</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// setter</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器" aria-hidden="true">#</a> 侦听器</h2><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1" aria-hidden="true">#</a> 使用场景</h3><p>需要在数据变化时执行异步或开销较大的操作时使用侦听器来响应数据的变化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果 \`question\` 发生改变，这个函数就会运行</span>
  <span class="token function-variable function">question</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newQuestion<span class="token punctuation">,</span> oldQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">&#39;Waiting for you to stop typing...&#39;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debouncedGetAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件基础" tabindex="-1"><a class="header-anchor" href="#组件基础" aria-hidden="true">#</a> 组件基础</h2><ul><li>组件可以复用无数次，每用一次组件，就会有一个它的新实例被创建</li><li>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝</li><li>每个组件必须只有一个根元素</li><li>组件的插槽可以向组件传递内容，只需要在组件内部使用<code>&lt;slot&gt;&lt;/slot&gt;</code></li><li>可以通过Vue 的 <code>&lt;component&gt;</code> 元素的 <code>is</code> 属性来实现动态组件</li></ul><h3 id="通过props传递数据" tabindex="-1"><a class="header-anchor" href="#通过props传递数据" aria-hidden="true">#</a> 通过props传递数据</h3><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个属性。</p><p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。</p><h3 id="使用-emit触发事件" tabindex="-1"><a class="header-anchor" href="#使用-emit触发事件" aria-hidden="true">#</a> 使用<code>$emit</code>触发事件</h3><ol><li>子组件可以通过调用内建的 <code>$emit</code> 方法传入事件名称来触发一个事件</li><li>父组件可以通过 v-on 来监听子组件要触发的事件来调用父组件中的方法</li><li>可以使用 <code>$emit</code> 的第二个参数来传递参数</li></ol>`,21),u=[c,p,i];function r(k,d){return e(),l("div",null,u)}const m=t(o,[["render",r],["__file","vue-basic-notes.html.vue"]]);export{m as default};
