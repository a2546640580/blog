(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{501:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("p",[e._v("FileProvider是Android中推荐的获取文件Uri方式，将取代Uri.fromFile()方法")]),e._v(" "),t("h2",{attrs:{id:"老方式的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老方式的问题"}},[e._v("#")]),e._v(" 老方式的问题")]),e._v(" "),t("p",[e._v("在安卓7.0版本中，直接根据内部存储中的文件获取Uri会程序崩溃，相关代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Uri uri = Uri.fromFile(file);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("运行的话，会报错：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/shug666/image/main/images/20180425172136380",alt:""}})]),e._v(" "),t("p",[e._v("解决方法，就是引入FileProvider")]),e._v(" "),t("h2",{attrs:{id:"fileprovider的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fileprovider的使用"}},[e._v("#")]),e._v(" FileProvider的使用")]),e._v(" "),t("p",[e._v("现在，我一步一步来给大家演示FileProvider的用法")]),e._v(" "),t("p",[e._v("声明")]),e._v(" "),t("p",[e._v("我们首先要在清单文件中application节点下，声明一个FileProvider子节点")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<provider\n  android:authorities="com.example.songzeceng.myFileProvider"\n  android:name="android.support.v4.content.FileProvider"\n  android:exported="false"\n  android:grantUriPermissions="true">\n  <meta-data android:name="android.support.FILE_PROVIDER_PATHS"\n             android:resource="@xml/updatepath"></meta-data>\n</provider>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("里面的属性和节点解释如下：")]),e._v(" "),t("p",[e._v("provider:表示这是一个provider")]),e._v(" "),t("p",[e._v("android:authorities:provider的名字，跟ContentProvider的这个属性一样，是这个provider的标识")]),e._v(" "),t("p",[e._v("android:name:固定的，要用FileProvider就必须声明成代码中的样子")]),e._v(" "),t("p",[e._v("android:exported:可否导出，必须为false")]),e._v(" "),t("p",[e._v("android:grantUriPermissions:是否被赋予uri权限，必须为true")]),e._v(" "),t("p",[t("meta-data",[e._v("：这个provider的外部应用可见的属性，必须声明一个path，表示分享的目录")])],1),e._v(" "),t("p",[e._v("android:name:分享目录的名字，固定写死的")]),e._v(" "),t("p",[e._v("android:resource:路径对应的xml文件，这个应该在res目录下新建一个对应的xml文件")]),e._v(" "),t("p",[e._v("创建分享xml文件")]),e._v(" "),t("p",[e._v("现在我们要创建一个跟上文说的android:resource标签对应的xml文件--\x3exml/updatepath.xml")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="utf-8"?>\n<resources xmlns:android="http://schemas.android.com/apk/res/android">\n    <paths>\n        <files-path path="files" name="files" />\n        <cache-path path="files" name="cache" />\n        <external-path path="files" name="external" />\n        <external-files-path path="files" name="externalfiles"/>\n        \x3c!-- 此标签需要 support 25.0.0以上才可以使用--\x3e\n        <external-cache-path  path="files" name="externalcache"/>\n    </paths>\n</resources>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("其中标签 file-path、cache-path这些表示手机内存中的某个目录，path属性是这个目录下的子目录，name属性是假名，这个假名将替代path目录的绝对路径")]),e._v(" "),t("p",[e._v("图中涉及的子标签对应的路径如下：")]),e._v(" "),t("table",{staticStyle:{width:"200px"},attrs:{border:"1",cellpadding:"1",cellspacing:"1"}},[t("tbody",[t("tr",[t("td",[e._v("子标签")]),t("td",[e._v("子标签对应的绝对路径(不加path)")]),t("td",[e._v("子标签对应的绝对路径(加path)")]),t("td",[e._v("假名")])]),t("tr",[t("td",[e._v("files-path")]),t("td",[t("p",[e._v("app私有存储区域下的files目录")]),t("p",[e._v("(context.getFilesDir())")])]),t("td",[t("p",[e._v("files目录加上path")]),t("p",[e._v("(context.getFilesDir()"),t("span",{staticStyle:{color:"#000000"}},[e._v("/files")]),e._v(")")])]),t("td",[e._v("files")])]),t("tr",[t("td",[e._v("cache-path")]),t("td",[t("p",[e._v("app私有目录下的缓存目录")]),t("p",[e._v("(context.getCacheDir())")])]),t("td",[t("p",[e._v("私有缓存目录加上path")]),t("p",[e._v("(context.getCacheDir()/files)")])]),t("td",[e._v("cache")])]),t("tr",[t("td",[e._v("external-path")]),t("td",[t("p",[e._v("外存根目录")]),t("p",[e._v("(Environment.")]),t("p",[e._v("getExternalStorageDirectory())")])]),t("td",[t("p",[e._v("外存根目录加上path")]),t("p",[e._v("(Environment.")]),t("p",[e._v("getExternalStorageDirector()")]),t("p",[e._v("/files)")])]),t("td",[e._v("external")])]),t("tr",[t("td",[t("p",[e._v("external-files-path")])]),t("td",[t("p",[e._v(" ")]),t("p",[e._v("外存根目录下的文件目录")]),t("p",[e._v("(context.getExternalFilesDir())")])]),t("td",[t("p",[e._v(" ")]),t("p",[e._v("文件目录加上path")]),t("p",[e._v("(context.")]),t("p",[e._v("getExternalFilesDir()/files)")])]),t("td",[e._v("externalfiles")])]),t("tr",[t("td",[t("p",[e._v("external-cache-path")])]),t("td",[t("p",[e._v("外存根目录下的缓存目录")]),t("p",[e._v("(context.getExternalCacheDir())")])]),t("td",[t("p",[e._v("缓存目录加上path")]),t("p",[e._v("(context.")]),t("p",[e._v("getExternalCacheDir()/files)")])]),t("td",[e._v("externalcaches")])]),t("tr",[t("td",[e._v(" ")]),t("td",[e._v(" ")]),t("td",[e._v(" ")]),t("td",[e._v(" ")])])])]),e._v(" "),t("p",[e._v("最后的结果，就是外部app获取到的分享目录，不是路径，而是假名")]),e._v(" "),t("p",[e._v("而且，每添加一个分享目录，就要添加一个对应的子标签")]),e._v(" "),t("p",[e._v("比如我添加一个新的分享目录，是外存根目录下的一个文件夹，就添加一个子标签如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<external-path name = "fp_pictures" path = "/Pictures/dongqiudi/"></external-path>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("就可以了")]),e._v(" "),t("p",[e._v("利用FileProvider获取文件Uri")]),e._v(" "),t("p",[e._v("代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String path = Environment.getExternalStorageDirectory().getPath() + "/Pictures/dongqiudi/1523624189281.jpg";\nFile file = new File(path);\nif (file.exists()) {\n   Uri uri = FileProvider.getUriForFile(MainActivity.this, "com.example.songzeceng.myFileProvider", file);\n   Log.i(TAG, "uri:" + uri.toString());\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("代码很简单，只不过为了以防出错，我判断了一下文件是否存在(不存在会怎样，我没试过)")]),e._v(" "),t("p",[e._v("结果")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/shug666/image/main/images/20180425181757810",alt:""}})]),e._v(" "),t("p",[e._v("可以看到，它确实把我们指定的分享目录路径，换成了假名fp_pictures。这个uri和以前的路径uri不一样，但不影响使用，他还是会正确地找到我们的文件的。")]),e._v(" "),t("h2",{attrs:{id:"通过uri获取文件路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过uri获取文件路径"}},[e._v("#")]),e._v(" 通过uri获取文件路径")]),e._v(" "),t("p",[e._v("由于FileProvider类只有一个getUriForFile()方法对外开放，那么如果要通过FileProvider的uri获取文件路径，就需要通过反射了。")]),e._v(" "),t("p",[e._v("先说思路：")]),e._v(" "),t("p",[e._v("FileProvider内部有一个SimplePathStrategy类，这个类实现了PathStrategy接口，负责文件uri和文件路径的转换。FileProvider通过调用自己的私有静态方法getPathStrategy()来初始化PathStrategy对象，因此我们可以直接调用这个方法获取已经初始化好的PathStrategy对象。然后调用这个对象的getFileForUri()方法，获取uri对应的文件对象，最后通过文件对象获取路径。")]),e._v(" "),t("p",[e._v("代码如下所示")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('                Class<FileProvider> clazz = FileProvider.class;\n                Class<?> simplePathStrategyClazz = clazz.getDeclaredClasses()[0];\n\n                Method getPathStrategyMethod = clazz.getDeclaredMethod("getPathStrategy", Context.class, String.class);\n                getPathStrategyMethod.setAccessible(true);\n\n                Object simplePathStrategyObject = getPathStrategyMethod.invoke(null, MainActivity.this, "com.example.songzeceng.myFileProvider");\n\n                Method method = simplePathStrategyClazz.getDeclaredMethod("getFileForUri", Uri.class);\n                method.setAccessible(true);\n                File destFile = (File) method.invoke(simplePathStrategyObject, uri);\n\n                Log.i(TAG, "share: file path:" + destFile.getAbsolutePath());\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("首先，获取FileProvider的类和SimplePathStrategy的类，我们所需的类就这两个；")]),e._v(" "),t("p",[e._v("其次，获取FileProvider的getPathStrategy()方法对象，方法入参为Context对象和String对象，这个String对象就是我们的authority标识。当然要把这个方法对象的可达性设置为true；")]),e._v(" "),t("p",[e._v("再次，调用getPathStrategy()方法，传入上下文对象和标识字符串，得到SimplePathStrategy对象。这里只能用Object类来接，因为外部访问不到SimplePathStrategy类或PathStrategy类；")]),e._v(" "),t("p",[e._v("然后，获取SimplePathStrategy类的getFileForUri()方法对象，入参为Uri对象，设置方法可达性为true；")]),e._v(" "),t("p",[e._v("最后，调用SimplePathStrategy对象的getFileForUri()方法，入参为Uri对象，强制类型转换成File后，即可获取绝对路径。")]),e._v(" "),t("p",[e._v("程序运行的输出日志如下图所示")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/shug666/image/main/images/20191120204411459.png",alt:""}})]),e._v(" "),t("p",[e._v("功能可以实现，但是反射的消耗很大，用的时候还是要三思。")])])}),[],!1,null,null,null);t.default=s.exports}}]);