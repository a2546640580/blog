import{_ as n,o as a,c as s,e as t}from"./app-9f26182c.js";const e={},p=t(`<h2 id="绘图工具" tabindex="-1"><a class="header-anchor" href="#绘图工具" aria-hidden="true">#</a> 绘图工具</h2><p>canvas画布</p><ul><li>默认大小为300*200</li><li>可通过width属性和height属性设置画布大小</li><li>解决画布重绘问题：描边后使用 <code>beginPath()</code> 开启新的图层</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="绘图方法" tabindex="-1"><a class="header-anchor" href="#绘图方法" aria-hidden="true">#</a> 绘图方法</h2><p>线连接方式： lineJoin: round | bevel | miter (默认)</p><p>线帽（线两端的结束方式）： lineCap: butt(默认值) | round | square</p><p>闭合路径： ctx.closePath()</p><p>开启新的图层： ctx.beginPath()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取canvas画布对象</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取绘图上下文</span>
<span class="token keyword">var</span> ctx<span class="token operator">=</span>canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 落笔</span>
ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
<span class="token comment">// 连线</span>
ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
<span class="token comment">// 设置线的颜色为红色</span>
ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 设置线宽</span>
ctx<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 描边</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="渐变方案" tabindex="-1"><a class="header-anchor" href="#渐变方案" aria-hidden="true">#</a> 渐变方案</h2><h3 id="线性渐变" tabindex="-1"><a class="header-anchor" href="#线性渐变" aria-hidden="true">#</a> 线性渐变</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// x0--&gt;渐变开始的x坐标</span>
<span class="token comment">// y0--&gt;渐变开始的y坐标</span>
<span class="token comment">// x1--&gt;渐变结束的x坐标</span>
<span class="token comment">// y1--&gt;渐变结束的y坐标</span>
<span class="token keyword">var</span> grd<span class="token operator">=</span>ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      
<span class="token comment">// 设置渐变的开始颜色</span>
grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
<span class="token comment">// 设置渐变的中间颜色</span>
grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token string">&quot;yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token comment">// 设置渐变的结束颜色</span>
grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        

ctx<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span>grd<span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：addColorStop(offse,color)中渐变的开始位置和结束位置介于0-1之间，0代表开始，1代表结束。中间可以设置任何小数。</p><h3 id="径向渐变" tabindex="-1"><a class="header-anchor" href="#径向渐变" aria-hidden="true">#</a> 径向渐变</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (x0,y0)--&gt;渐变的开始圆的 x,y 坐标</span>
<span class="token comment">// r0--&gt;开始圆的半径</span>
<span class="token comment">// (x1,y1)--&gt;渐变的结束圆的 x,y 坐标</span>
<span class="token comment">// r1--&gt;结束圆的半径</span>

ctx<span class="token punctuation">.</span><span class="token function">createradialGradient</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>r0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="填充效果" tabindex="-1"><a class="header-anchor" href="#填充效果" aria-hidden="true">#</a> 填充效果</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>fillstyle<span class="token operator">=</span><span class="token string">&quot;值&quot;</span><span class="token punctuation">;</span>    设置填充颜色
ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	          设置填充效果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非零环绕原则" tabindex="-1"><a class="header-anchor" href="#非零环绕原则" aria-hidden="true">#</a> 非零环绕原则</h2><ol><li>任意找一点，越简单越好</li><li>以点为圆心，绘制一条射线，越简单越好（相交的边越少越好）</li><li>以射线为半径顺时针旋转，相交的边同向记为+1，反方向记为-1，如果相加的区域等于0，则不填充。（同向和反向指的是旋转方向和绘制方向是否相同）</li><li>非零区域填充<br> 例子：回字图案</li></ol><h2 id="绘制虚线" tabindex="-1"><a class="header-anchor" href="#绘制虚线" aria-hidden="true">#</a> 绘制虚线</h2><ul><li>原理：设置虚线其实就是设置实线与空白部分直接的距离,利用数组描述其中的关系</li><li>绘制 <ul><li>ctx.setLineDash(数组);</li><li>ctx.stroke();</li></ul></li><li>实线和空白不断根据数组的值循环</li><li>如果要将虚线改为实线，只要将数组改为空数组即可</li></ul><h2 id="绘制矩形" tabindex="-1"><a class="header-anchor" href="#绘制矩形" aria-hidden="true">#</a> 绘制矩形</h2><ul><li>绘制一个描边矩形： <code>content.strokeRect(x,y,width,height)</code></li><li>绘制一个填充矩形： <code>content.fillRect(x,y,width,height)</code></li><li>清除： <code>content.clearRect(x,y,width,height)</code></li><li>实现动画矩形 <ul><li>先清屏</li><li>绘制图形</li><li>处理变量</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//开始位置</span>
<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//处理的是一个增量</span>
<span class="token keyword">var</span> step<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//改变方向变量</span>
<span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个定时器</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//先清屏</span>
	ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//开始绘制图形</span>
	ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//开始处理变量</span>
	x<span class="token operator">+=</span>step<span class="token operator">*</span>i<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">&gt;</span> canvas<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绘制文本" tabindex="-1"><a class="header-anchor" href="#绘制文本" aria-hidden="true">#</a> 绘制文本</h2><ul><li><p>绘制填充文本：<code>content.fillText(文本的内容,x,y)</code></p></li><li><p>绘制镂空文本：<code>content.strokeText()</code></p></li><li><p>设置文字大小：</p><ul><li><code>content.font=&quot;20px 微软雅黑&quot;</code></li><li>备注： 该属性设置文字大小，必须按照cssfont属性的方式设置</li></ul></li><li><p>文字水平对齐方式</p><ul><li><code>content.textalign=&quot;left | right | center&quot;</code></li><li>文字在圆心点位置的对齐方式</li></ul></li><li><p>文字垂直对齐方式</p><ul><li><code>content.textBaseline=&quot;top | middle | bottom | alphabetic(默认)&quot;</code></li></ul></li><li><p>文字阴影效果</p><ul><li>设置文字阴影的颜色 <code>ctx.shadowColor=&quot;red&quot;</code></li><li>设置文字阴影的水平偏移量 <code>ctx.ShadowOffsetX=值</code></li><li>设置文字阴影的垂直偏移量 <code>ctx.shadowOffsetY=值</code></li><li>设置文字阴影的模糊度 <code>ctx.shadowBlur=值</code></li></ul></li></ul><h2 id="绘制图片" tabindex="-1"><a class="header-anchor" href="#绘制图片" aria-hidden="true">#</a> 绘制图片</h2><ul><li>将图片绘制到画布的指定位置 <ul><li><code>content.drawImage(图片对象,x,y)</code></li></ul></li><li>将图片绘制到指定区域大小的位置 <ul><li><code> content.drawImage(图片对象,x,y,width,height);</code></li><li>x,y指的是矩形区域的位置</li><li>width和height指的是矩形区域的大小</li></ul></li><li>将图片的指定区域绘制到指定矩形区域内 <ul><li><code>content.drawImage(图片对象,sx,sy,swidth,sheight,dx,dy,dwidth,dheight);</code></li><li>sx,sy 指的是要从图片哪块区域开始绘制</li><li>swidth，sheight 是指截取图片区域的大小</li><li>dx,dy 是指矩形区域的位置</li><li>dwidth,dheight是指矩形区域的大小</li></ul></li><li>解决图片绘制到某一个区域的按比例缩放绘制 <ul><li>绘制宽：绘制高 == 原始宽：原始高</li></ul></li></ul><h2 id="绘制圆弧" tabindex="-1"><a class="header-anchor" href="#绘制圆弧" aria-hidden="true">#</a> 绘制圆弧</h2><ul><li><code>content.arc(x,y,radius,startradian,endradian,direct);</code><ul><li>(x,y) 为圆心的坐标</li><li>radius 为半径</li><li>startradian 为开始弧度</li><li>endradian 为结束弧度</li><li>direct 为方向（默认顺时针 false）true 代表逆时针</li></ul></li><li>以圆心为中心向右为0角 顺时针为正，逆时针为负</li><li>角度 和 弧度的关系： 角度:弧度= 180:pi</li></ul><h2 id="坐标系变换" tabindex="-1"><a class="header-anchor" href="#坐标系变换" aria-hidden="true">#</a> 坐标系变换</h2><h3 id="平移" tabindex="-1"><a class="header-anchor" href="#平移" aria-hidden="true">#</a> 平移</h3><p>坐标系原点的平移：<code>ctx.translate(x,y);</code></p><p>通过该方法可以将原点的位置进行重新设置。</p><p>注意</p><ul><li>translate(x,y) 中不能设置一个值</li><li>与moveTo(x,y) 的区别 <ul><li>moveTo(x,y) 指的是将画笔的落笔点的位置改变，而坐标系中的原点位置并没有发生改变</li><li>translate(x,y) 是将坐标系中的原点位置发生改变</li></ul></li></ul><h3 id="旋转" tabindex="-1"><a class="header-anchor" href="#旋转" aria-hidden="true">#</a> 旋转</h3><p>坐标系旋转：<code>ctx.rotate(弧度)</code></p><h3 id="伸缩" tabindex="-1"><a class="header-anchor" href="#伸缩" aria-hidden="true">#</a> 伸缩</h3><p>沿着x轴和y轴缩放：<code>ctx.scale(x,y)</code></p><p>x,y 为倍数 例如： 0.5 1</p>`,42),i=[p];function c(l,o){return a(),s("div",null,i)}const d=n(e,[["render",c],["__file","canvas.html.vue"]]);export{d as default};
